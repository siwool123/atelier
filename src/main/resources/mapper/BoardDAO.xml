<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.springboot.restboard.IBoardService">
	<select id="pselectall" resultType="com.edu.springboot.restboard.ProductDTO">
		SELECT * from product
	</select>
	<select id="selectbya" resultType="com.edu.springboot.restboard.ProductDTO">
		SELECT * from product WHERE aidx=#{param1}
	</select>
	
	<select id="minprice">
		SELECT min(price) from product
	</select>
	<select id="maxprice">
		SELECT max(price) from product
	</select>

	<select id="totalCount" resultType="int" parameterType="com.edu.springboot.restboard.ParameterDTO">
		SELECT count(*) from product 
		<where> 
		<!-- 검색어가 null, 빈값이 아닐때만 where 절을 동적으로 추가한다. -->
		<choose>
			<when test="sWord!=null and !sWord.isEmpty()">
				<foreach collection="sWord" item="str" separator="or">
					 title LIKE '%' || #{str} || '%' OR m_name LIKE '%' || #{str} || '%'
				</foreach>
			</when>
			<when test="pmin!=null and !pmin.isEmpty() and pmax!=null and !pmax.isEmpty()">
				 price BETWEEN #{pmin} AND #{pmax}
			</when>
			<when test="sell!=null and !sell.isEmpty() and sell.equals('so')"> sold = 1</when>
			<when test="sell!=null and !sell.isEmpty() and sell.equals('on')"> sold = 0</when>
			<when test="auction!=null and !auction.isEmpty() and auction.equals('na')"> auction = 0</when>
			<when test="auction!=null and !auction.isEmpty() and auction.equals('au')"> auction = 1</when>
			<when test="ori!=null and !ori.isEmpty() and ori.equals('sq')"> size1=size2</when>
			<when test="ori!=null and !ori.isEmpty() and ori.equals('la')"> size1 &gt; size2</when>
			<when test="ori!=null and !ori.isEmpty() and ori.equals('po')"> size1 &lt; size2</when>
			<when test="size!=null and !size.isEmpty() and size.equals('xs')"> size2 BETWEEN 0 and 15</when>
			<when test="size!=null and !size.isEmpty() and size.equals('ss')"> size2 BETWEEN 15 and 25</when>
			<when test="size!=null and !size.isEmpty() and size.equals('mm')"> size2 BETWEEN 25 and 50</when>
			<when test="size!=null and !size.isEmpty() and size.equals('ll')"> size2 BETWEEN 50 and 100</when>
			<when test="size!=null and !size.isEmpty() and size.equals('xl')"> size2 &gt; 100</when>
			<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('ac')"> p_type='아크릴'</when>
			<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('oi')"> p_type='유화'</when>
			<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('wa')"> p_type='수채화'</when>
			<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('in')"> p_type='수묵화'</when>
			<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('sk')"> p_type='스케치'</when>
			<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('mi')"> p_type='혼합/기타'</when>
			<when test="cate!=null and !cate.isEmpty() and cate.equals('na')"> theme='자연/풍경'</when>
			<when test="cate!=null and !cate.isEmpty() and cate.equals('pe')"> theme='인물'</when>
			<when test="cate!=null and !cate.isEmpty() and cate.equals('an')"> theme='동식물'</when>
			<when test="cate!=null and !cate.isEmpty() and cate.equals('ob')"> theme='사물'</when>
			<when test="cate!=null and !cate.isEmpty() and cate.equals('ab')"> theme='추상'</when>
			<when test="cate!=null and !cate.isEmpty() and cate.equals('ot')"> theme='기타'</when>
		</choose>
		</where>
	</select>

	<select id="selectProduct" resultType="com.edu.springboot.restboard.ProductDTO" parameterType="com.edu.springboot.restboard.ParameterDTO">
		<!-- select * from product -->
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM (
				SELECT * FROM product 
				<where> 
						<choose>
							<when test="sWord!=null and !sWord.isEmpty()">
								<foreach collection="sWord" item="str" separator="or">
									 title LIKE '%' || #{str} || '%' OR m_name LIKE '%' || #{str} || '%'
								</foreach>
							</when>
							<when test="pmin!=null and !pmin.isEmpty() and pmax!=null and !pmax.isEmpty()">
								 price BETWEEN #{pmin} AND #{pmax}
							</when>
							<when test="sell!=null and !sell.isEmpty() and sell.equals('so')"> sold = 1</when>
							<when test="sell!=null and !sell.isEmpty() and sell.equals('on')"> sold = 0</when>
							<when test="auction!=null and !auction.isEmpty() and auction.equals('na')"> auction = 0</when>
							<when test="auction!=null and !auction.isEmpty() and auction.equals('au')"> auction = 1</when>
							<when test="ori!=null and !ori.isEmpty() and ori.equals('sq')"> size1=size2</when>
							<when test="ori!=null and !ori.isEmpty() and ori.equals('la')"> size1 &gt; size2</when>
							<when test="ori!=null and !ori.isEmpty() and ori.equals('po')"> size1 &lt; size2</when>
							<when test="size!=null and !size.isEmpty() and size.equals('xs')"> size2 BETWEEN 0 and 15</when>
							<when test="size!=null and !size.isEmpty() and size.equals('ss')"> size2 BETWEEN 15 and 25</when>
							<when test="size!=null and !size.isEmpty() and size.equals('mm')"> size2 BETWEEN 25 and 50</when>
							<when test="size!=null and !size.isEmpty() and size.equals('ll')"> size2 BETWEEN 50 and 100</when>
							<when test="size!=null and !size.isEmpty() and size.equals('xl')"> size2 &gt; 100</when>
							<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('ac')"> p_type='아크릴'</when>
							<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('oi')"> p_type='유화'</when>
							<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('wa')"> p_type='수채화'</when>
							<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('in')"> p_type='수묵화'</when>
							<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('sk')"> p_type='스케치'</when>
							<when test="ptype!=null and !ptype.isEmpty() and ptype.equals('mi')"> p_type='혼합/기타'</when>
							<when test="cate!=null and !cate.isEmpty() and cate.equals('na')"> theme='자연/풍경'</when>
							<when test="cate!=null and !cate.isEmpty() and cate.equals('pe')"> theme='인물'</when>
							<when test="cate!=null and !cate.isEmpty() and cate.equals('an')"> theme='동식물'</when>
							<when test="cate!=null and !cate.isEmpty() and cate.equals('ob')"> theme='사물'</when>
							<when test="cate!=null and !cate.isEmpty() and cate.equals('ab')"> theme='추상'</when>
							<when test="cate!=null and !cate.isEmpty() and cate.equals('ot')"> theme='기타'</when>
						</choose>
				</where>
				<if test='orderby != null and !orderby.isEmpty()'>
				<choose>
						<when test='orderby.equals("11")'> ORDER BY p_like DESC</when>
						<when test='orderby.equals("22")'> ORDER BY price</when>
						<when test='orderby.equals("33")'> ORDER BY price DESC</when>
						<otherwise> ORDER BY pidx DESC </otherwise>
				</choose>
				</if>
			) Tb) WHERE rNum BETWEEN #{start} AND #{end}
	</select>
	
	<select id="search" resultType="com.edu.springboot.restboard.ProductDTO" parameterType="com.edu.springboot.restboard.ParameterDTO">
		SELECT * FROM product where auction=0 
		<if test="sWord!=null">
			<foreach collection="sWord" item="str" open="(" close=")" separator="or">
				 and title LIKE '%' || #{str} || '%' OR m_name LIKE '%' || #{str} || '%'
			</foreach>
		</if>
		ORDER BY pidx DESC
	</select>
	
	<select id="pview" resultType="com.edu.springboot.restboard.ProductDTO">
		SELECT * FROM product WHERE pidx = #{param1}
	</select>
	<select id="aview" resultType="com.edu.springboot.restboard.ArtistDTO">
		SELECT * FROM artist WHERE aidx = #{param1}
	</select>
	<select id="rview" resultType="com.edu.springboot.restboard.ReviewDTO">
		SELECT * FROM review WHERE pidx = #{param1}
	</select>
	<select id="mview" resultType="com.edu.springboot.restboard.MemberDTO">
		SELECT * FROM member WHERE id = #{param1}
	</select>
	
	
	<insert id="write" >
		INSERT INTO product (pidx, title, content, id) VALUES (seq_product.nextval, #{title}, #{content}, #{id})
	</insert>
	
	<select id="plview" resultType="com.edu.springboot.restboard.PlikeDTO">
		SELECT * FROM p_like WHERE pidx=#{param1} AND midx=#{param2}
	</select>
	<delete id="pldelete">DELETE FROM p_like WHERE lidx=#{param1}</delete>
	<insert id="pladd">INSERT INTO p_like VALUES (seq_p_like.nextval, #{pidx}, #{aidx}, #{midx})</insert>
	<select id="plikecount">SELECT count(*) FROM p_like WHERE pidx=#{param1}</select>
	<update id="updateplcnt">UPDATE product SET p_like = #{param1} WHERE pidx=#{param2}</update>
	
	<select id="rvlistbya" resultType="com.edu.springboot.restboard.ReviewDTO" parameterType="com.edu.springboot.restboard.ParameterDTO">
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM (
				SELECT * FROM review WHERE aidx = #{aidx}
			) Tb) WHERE rNum BETWEEN #{start} AND #{end}
	</select>
	
	<select id="productsbyas" resultType="com.edu.springboot.restboard.ProductDTO" parameterType="com.edu.springboot.restboard.ParameterDTO">
		SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM (
				SELECT * FROM product WHERE aidx=#{aidx} AND sold=#{sold}
			) Tb) WHERE rNum BETWEEN #{start} AND #{end}
	</select>
	
	<select id="cartview" resultType="com.edu.springboot.restboard.CartDTO" parameterType="com.edu.springboot.restboard.ParameterDTO">
		SELECT * FROM cart WHERE midx=#{midx} AND pidx=#{pidx}
	</select>
	<select id="cartsview" resultType="com.edu.springboot.restboard.CartDTO">
		SELECT * FROM cart WHERE midx = #{param1}
	</select>
	<insert id="cartadd" parameterType="com.edu.springboot.restboard.ParameterDTO">
		INSERT INTO cart VALUES (seq_cart.nextval, #{pidx}, #{midx})
	</insert>
	<delete id="delCart">DELETE FROM cart WHERE pidx=#{param1}</delete>
	
	<insert id="payorder" parameterType="com.edu.springboot.restboard.OrderDTO">
		INSERT INTO order1 (oidx, midx, paymethod, price, paydate, receiver, r_phone, r_address, message, apinum, pidx, add_point, minus_point) VALUES 
		(fn_create_orderno, #{midx}, #{paymethod}, #{price}, sysdate, #{receiver}, #{r_phone}, #{r_address}, #{message}, #{apinum}, #{pidx}, #{add_point}, #{minus_point})
	</insert>
	
	<insert id="bankorder" parameterType="com.edu.springboot.restboard.OrderDTO">
		INSERT INTO order1 (oidx, midx, paymethod, price, receiver, r_phone, r_address, message, owner, pidx, add_point, minus_point) VALUES 
		(fn_create_orderno, #{midx}, #{paymethod}, #{price}, #{receiver}, #{r_phone}, #{r_address}, #{message}, #{owner}, #{pidx}, #{add_point}, #{minus_point})
	</insert>
	
	<insert id="insertorder2" parameterType="com.edu.springboot.restboard.Order2DTO">
		INSERT INTO order2 (o2idx, oidx, pidx, aidx, price, midx) VALUES 
		(seq_order2.nextval, #{oidx}, #{pidx}, #{aidx}, #{price}, #{midx})
	</insert>
	
	<update id="setsold">UPDATE product SET sold=1 where pidx=#{param1}</update>
	
	<select id="orderNum">
	SELECT oidx FROM (SELECT oidx FROM order1 WHERE midx=#{param1} ORDER BY orderdate DESC) WHERE ROWNUM = 1
	</select>
		
	<update id="memberPoint">
		UPDATE member SET total_point = total_point - #{param1} WHERE midx=#{param2}
	</update>
	
	<insert id="pinsert" parameterType="com.edu.springboot.restboard.PointDTO">
		INSERT INTO m_point (point_idx, midx, minus_point, add_point, oidx) VALUES 
		(seq_point.nextval, #{midx}, #{minus_point}, #{add_point}, #{oidx})
	</insert>
	
	<select id="olist" resultType="com.edu.springboot.restboard.OrderDTO">
		SELECT * FROM order1 WHERE midx=#{param1}
	</select>
	
	<select id="notPaid" resultType="com.edu.springboot.restboard.OrderDTO">
		SELECT * FROM order1 WHERE midx=#{param1} and paydate is null
	</select>
	
	<select id="notShipped" resultType="com.edu.springboot.restboard.OrderDTO">
		SELECT * FROM order1 WHERE midx=#{param1} and shipdate is null
	</select>
	
	<select id="totalLikeCount" resultType="int" parameterType="com.edu.springboot.restboard.ParameterDTO">
		SELECT count(*) from p_like where midx=#{param1}
	</select>
	
	<select id="selectLikeProduct" resultType="com.edu.springboot.restboard.ProductDTO" parameterType="com.edu.springboot.restboard.ParameterDTO">
		<!-- select * from product -->
		<!-- SELECT * FROM (
			SELECT Tb.*, rownum rNum FROM (
				SELECT * FROM product inner join p_like on product.pidx = p_like.pidx where p_like.midx=#{midx}
			) Tb) WHERE rNum BETWEEN #{start} AND #{end} -->
			SELECT * FROM product inner join p_like on product.pidx = p_like.pidx where p_like.midx=#{midx}
	</select>
	
	<select id="opjoin" resultType="com.edu.springboot.restboard.OPjoinDTO" parameterType="com.edu.springboot.restboard.ParameterDTO">
		<!-- select order1.oidx, order1.midx, order1.paymethod, order1.price, order1.orderdate, order1.paydate, order1.shipdate, order1.courier, order1.t_num, order1.auction, 
		product.pidx, product.sfile, product.title, product.m_name from order1 join product 
		on to_char(substr(order1.pidx, 1, 4), '9999') = to_char(product.pidx, '9999') where order1.midx=#{midx} -->
		select order2.o2idx, order1.oidx, order1.midx, order1.paymethod, order1.price as tprice, order1.orderdate, order1.paydate, order1.shipdate, order1.courier, order1.t_num, 
 order1.receiver, order1.r_phone, order1.r_address, order1.message, order1.owner, 
order1.auction, order1.add_point, order1.minus_point, product.pidx, product.sfile, product.title, product.m_name, product.size1, product.size2, product.price
from order2 inner join product on order2.pidx = product.pidx
inner join order1 on order1.oidx = order2.oidx where order1.midx=#{midx}
			<choose>
				<when test="status != null and !status.isEmpty() and status.equals('aa')"> and order1.paydate is null and order1.shipdate is null</when>
				<when test="status != null and !status.isEmpty() and status.equals('bb')"> and order1.paydate is not null and order1.shipdate is null</when>
				<when test="status != null and !status.isEmpty() and status.equals('cc')"> and order1.paydate is not null and order1.shipdate is not null</when>
				<when test="dmin!=null and !dmin.isEmpty() and dmax!=null and !dmax.isEmpty()">
					 and order1.orderdate BETWEEN #{dmin} AND #{dmax}
				</when>
				<when test="sWord!=null and !sWord.isEmpty()">
					<foreach collection="sWord" item="str" separator="or">
						and product.title LIKE '%' || #{str} || '%' OR product.m_name LIKE '%' || #{str} || '%'
					</foreach>
				</when>
			</choose>
	</select>
	
	<select id="o2list" resultType="com.edu.springboot.restboard.Order2DTO">
		SELECT * FROM order2 WHERE oidx=#{param1}
	</select>
	
	<select id="oview" resultType="com.edu.springboot.restboard.OrderDTO">
		SELECT * FROM order1 WHERE oidx=#{param1}
	</select>
	<select id="orderdate">
		select to_char(orderdate, 'yyyy-mm-dd hh:mi:ss') from order1 where oidx = #{param1}
	</select>
	
	<select id="opjoin2" resultType="com.edu.springboot.restboard.OPjoinDTO" >
		select order2.o2idx, order2.oidx, order1.price as tprice, order2.midx, order1.paymethod, order1.orderdate, order1.paydate, order1.receiver, order1.r_phone, order1.r_address, order1.message, order1.shipdate, order1.courier, order1.t_num,
		 order1.owner, order1.auction, product.pidx, product.title, product.size1, product.size2, product.price, product.sfile, product.m_name, m_point.add_point, m_point.minus_point
		from order2 
		    inner join order1 on order2.oidx = order1.oidx 
		    inner join product on order2.pidx = product.pidx
		    inner join m_point on order2.oidx = m_point.oidx where order2.oidx=#{param1}
	</select>
	
	<insert id="rinsert" parameterType="com.edu.springboot.restboard.ReviewDTO">
	 	insert into review (ridx, pidx, aidx, midx, r_content, star, sfile1, sfile2, sfile3, m_name, psfile, title)
	 	values (seq_review, #{pidx}, #{aidx}, #{midx}, #{r_content}, #{star}, #{sfile1}, #{sfile2}, #{sfile3}, #{m_name}, #{psfile}, #{title})
	</insert>
	
	
</mapper> 